
import java.sql.*;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mjed
 */
public class tableView extends javax.swing.JFrame {

    /**
     * Creates new form tableView
     */
    public tableView() {
        initComponents();
        setDefaultCloseOperation(current.DISPOSE_ON_CLOSE);
        getLabel2().setVisible(false);
        getInput2().setVisible(false);
        orderButton.setVisible(false);
        orderLabel.setVisible(false);
        orderNumber.setVisible(false);
        orderTextFiled.setVisible(false);
    }

    public void OrderView() {
        orderButton.setVisible(true);
        orderLabel.setVisible(true);
        orderNumber.setVisible(true);
        orderTextFiled.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        input1 = new javax.swing.JTextField();
        label1 = new javax.swing.JLabel();
        instrLabel = new javax.swing.JLabel();
        Delete = new javax.swing.JButton();
        label2 = new javax.swing.JLabel();
        input2 = new javax.swing.JTextField();
        orderTextFiled = new javax.swing.JTextField();
        orderNumber = new javax.swing.JLabel();
        orderLabel = new javax.swing.JLabel();
        orderButton = new javax.swing.JButton();
        saveUpdate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        input1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input1ActionPerformed(evt);
            }
        });

        label1.setText("1");

        instrLabel.setText("To delete a recrod please put:");
        instrLabel.setToolTipText("");

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        label2.setText("2");

        input2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input2ActionPerformed(evt);
            }
        });

        orderTextFiled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderTextFiledActionPerformed(evt);
            }
        });

        orderNumber.setText("Order Number");

        orderLabel.setText("View products in order");

        orderButton.setText("Show");
        orderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtonActionPerformed(evt);
            }
        });

        saveUpdate.setText("Update");
        saveUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveUpdateActionPerformed(evt);
            }
        });

        jLabel2.setText("View");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106)
                                .addComponent(saveUpdate)))
                        .addGap(250, 250, 250)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orderLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(orderNumber)
                                .addGap(18, 18, 18)
                                .addComponent(orderTextFiled, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(445, 445, 445)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(477, 477, 477)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(instrLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label2)
                                .addComponent(saveUpdate))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(orderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(orderTextFiled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(orderNumber))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderButton)
                    .addComponent(Delete))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void input2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input2ActionPerformed

    private void UpdateJtable() {
        String query2 = "SELECT * FROM ";
        switch (jLabel1.getText()) {
            case "Employees":
                query2 += "EMPLOYEE";
                break;
            case "Dependents":
                query2 += "Dependent";
                break;
            case "Customers":
                query2 += "CUSTOMER";
                break;
            case "Products":
                query2 += "PRODUCT";
                break;
            default:
                if (jLabel1.getText().contains("Products in order number:")) {
                    query2 += "ProductInOrder where OrderID=" + jLabel1.getText().replaceAll("Products in order number:", "");
                }
                break;
        }
        try {
            Statement st = con.prepareStatement(query2);
            ResultSet rs = st.executeQuery(query2);
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(current, "Error: " + e.getMessage());
        }
    }

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        String query = "DELETE FROM ";
        switch (jLabel1.getText()) {
            case "Employees":
                query += "EMPLOYEE where emp_ID=";
                break;
            case "Dependents":
                query += "Dependent where emp_ID=";
                break;
            case "Customers":
                query += "CUSTOMER where customer_Phone=";
                break;
            case "Products":
                query += "PRODUCT where ProductID=";
                break;
            case "Orders":
                query += "Order where OrderID=";
                break;
            default:
                if (jLabel1.getText().contains("Products in order number:")) {
                    query += "ProductInOrder where OrderID=";
                }
                break;
        }

        String id = input1.getText();
        if (id.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Please fill the first input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            query += input1.getText();
        }
        if (getInput2().isVisible()) { // its dependets or order
            String id2 = input2.getText();
            if (id2.equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(this, "Please fill the second input", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                if (query.contains("Dependent")) {
                    query += " AND dependent_phone=" + input2.getText();
                } else if (query.contains("ProductInOrder")) {
                    query += " AND ProductID=" + input2.getText();
                }
            }
        }
        try {
            Statement st = con.prepareStatement(query);
            ResultSet rs = st.executeQuery(query);

            query = "commit";
            st = con.prepareStatement(query);
            rs = st.executeQuery(query);

            //update the jTable
            UpdateJtable();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(current, "Error: " + e.getMessage());

        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void orderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtonActionPerformed
        // TODO add your handling code here:
        if (orderTextFiled.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Order number is empty.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String querue = "SELECT * FROM ProductInOrder where OrderID=" + orderTextFiled.getText();
            try {
                Statement st = con.prepareStatement(querue);
                ResultSet rs = st.executeQuery(querue);
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        tableView tv = new tableView();
                        tv.setConnection(con);
                        tv.getTable().setModel(DbUtils.resultSetToTableModel(rs));
                        tv.setMainLabel("Products in order number:" + orderTextFiled.getText());
                        tv.getLabell().setText("Order ID: ");
                        tv.getInput1().setText(orderTextFiled.getText());
                        tv.getLabel2().setText("Product ID: ");
                        tv.getLabel2().setVisible(true);
                        tv.getInput2().setVisible(true);
                        tv.setVisible(true);
                        tv.updateButton(false);
                    }
                });

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_orderButtonActionPerformed

    public void updateButton(boolean x) {
        saveUpdate.setVisible(x);
    }

    private void saveUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveUpdateActionPerformed
        // TODO add your handling code here:

        // ********************************************************
        String querue2 = "Update ";
        try {
            int[] selectedRows = jTable1.getSelectedRows();
            System.out.println(selectedRows.length);
            for (int i = 0; i < selectedRows.length; i++) {
                System.out.println("once");
                switch (jLabel1.getText()) {
                    case "Employees":
                        querue2 += "EMPLOYEE set emp_Fname='" + jTable1.getValueAt(selectedRows[i], 1) + "',empMname='" + jTable1.getValueAt(selectedRows[i], 2) + "',empLname='" + jTable1.getValueAt(selectedRows[i], 3) + "'";
                        querue2 += ",emp_Address='" + jTable1.getValueAt(selectedRows[i], 5) + "',emp_salary=" + jTable1.getValueAt(selectedRows[i], 6);
                        querue2 += " Where emp_ID=" + jTable1.getValueAt(selectedRows[i], 4);
                        break;
                    case "Customers":
                        querue2 += "CUSTOMER set Customer_Fname='" + jTable1.getValueAt(selectedRows[i], 1) + "',customer_Mname='" + jTable1.getValueAt(selectedRows[i], 2) + "',customer_Lname='" + jTable1.getValueAt(selectedRows[i], 3) + "',customer_address='" + jTable1.getValueAt(selectedRows[i], 4) + "' WHERE customer_phone=" + jTable1.getValueAt(selectedRows[i], 0);
                        break;
                    case "Products":
                        querue2 += "PRODUCT set PNAME='" + jTable1.getValueAt(selectedRows[i], 1) + "',PRICE=" + jTable1.getValueAt(selectedRows[i], 2) + ",WarehouseID=" + jTable1.getValueAt(selectedRows[i], 3) + " where ProductID=" + jTable1.getValueAt(selectedRows[i], 0);
                        break;
                }
                System.out.println(querue2);
                Statement st = con.prepareStatement(querue2);
                ResultSet rs = st.executeQuery(querue2);

                querue2 = "commit";
                st = con.prepareStatement(querue2);
                rs = st.executeQuery(querue2);
                JOptionPane.showMessageDialog(current, "UPDATED");

                UpdateJtable();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(current, "Error: " + e.getMessage());
        }

    }//GEN-LAST:event_saveUpdateActionPerformed

    private void input1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input1ActionPerformed

    private void orderTextFiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderTextFiledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderTextFiledActionPerformed

    public void setMainLabel(String text) {
        jLabel1.setText(text);
    }

    public void setinstrLabel(String text) {
        instrLabel.setText(text);
    }

    public JTable getTable() {
        return jTable1;
    }

    public JLabel getLabell() {
        return label1;
    }

    public JLabel getLabel2() {
        return label2;
    }

    public JTextField getInput1() {
        return input1;
    }

    public JTextField getInput2() {
        return input2;
    }

    Connection con;

    public void setConnection(Connection con) {
        this.con = con;
    }

    /**
     * @param args the command line arguments
     */
    static tableView current = null;

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tableView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tableView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tableView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tableView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                current = new tableView();
                current.setVisible(true);
            }

        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JTextField input1;
    private javax.swing.JTextField input2;
    private javax.swing.JLabel instrLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JButton orderButton;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JLabel orderNumber;
    private javax.swing.JTextField orderTextFiled;
    private javax.swing.JButton saveUpdate;
    // End of variables declaration//GEN-END:variables
}
